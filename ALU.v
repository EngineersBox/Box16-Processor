/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Decoder2 (
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    input [1:0] sel
);
    assign out_0 = (sel == 2'h0)? 1'b1 : 1'b0;
    assign out_1 = (sel == 2'h1)? 1'b1 : 1'b0;
    assign out_2 = (sel == 2'h2)? 1'b1 : 1'b0;
    assign out_3 = (sel == 2'h3)? 1'b1 : 1'b0;
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module ALU (
  input A3,
  input B3,
  input A2,
  input B2,
  input A1,
  input B1,
  input A0,
  input B0,
  input Sel1,
  input Sel0,
  input Cin,
  output V3,
  output Cout,
  output V2,
  output V1,
  output V0
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [1:0] s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire [1:0] s30;
  wire s31;
  wire s32;
  assign s7 = ~ B3;
  assign s15 = ~ B2;
  assign s22 = ~ B1;
  assign s29 = ~ B0;
  assign s30[0] = Sel0;
  assign s30[1] = Sel1;
  Decoder2 Decoder2_i0 (
    .sel( s30 ),
    .out_1( s6 ),
    .out_2( s31 ),
    .out_3( s32 )
  );
  Mux_2x1 Mux_2x1_i1 (
    .sel( s6 ),
    .in_0( B3 ),
    .in_1( s7 ),
    .out( s0 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( s6 ),
    .in_0( B2 ),
    .in_1( s15 ),
    .out( s9 )
  );
  Mux_2x1 Mux_2x1_i3 (
    .sel( s6 ),
    .in_0( B1 ),
    .in_1( s22 ),
    .out( s16 )
  );
  Mux_2x1 Mux_2x1_i4 (
    .sel( s6 ),
    .in_0( B0 ),
    .in_1( s29 ),
    .out( s23 )
  );
  assign s8[0] = s31;
  assign s8[1] = s32;
  assign s25 = (Cin | s6);
  assign s1 = (A3 ^ s0);
  assign s4 = (s0 & A3);
  assign s10 = (A2 ^ s9);
  assign s13 = (s9 & A2);
  assign s17 = (A1 ^ s16);
  assign s20 = (s16 & A1);
  assign s24 = (A0 ^ s23);
  assign s27 = (s23 & A0);
  assign s5 = (s1 | s4);
  assign s14 = (s10 | s13);
  assign s21 = (s17 | s20);
  assign s26 = (s25 ^ s24);
  assign s28 = (s24 | s27);
  assign s18 = ((s25 & s24) | s27);
  assign s19 = (s18 ^ s17);
  assign s11 = ((s18 & s17) | s20);
  Mux_4x1 Mux_4x1_i5 (
    .sel( s8 ),
    .in_0( s26 ),
    .in_1( s27 ),
    .in_2( s28 ),
    .in_3( s28 ),
    .out( V0 )
  );
  assign s12 = (s11 ^ s10);
  assign s2 = ((s11 & s10) | s13);
  Mux_4x1 Mux_4x1_i6 (
    .sel( s8 ),
    .in_0( s19 ),
    .in_1( s20 ),
    .in_2( s21 ),
    .in_3( s21 ),
    .out( V1 )
  );
  assign s3 = (s2 ^ s1);
  assign Cout = ((s2 & s1) | s4);
  Mux_4x1 Mux_4x1_i7 (
    .sel( s8 ),
    .in_0( s12 ),
    .in_1( s13 ),
    .in_2( s14 ),
    .in_3( s14 ),
    .out( V2 )
  );
  Mux_4x1 Mux_4x1_i8 (
    .sel( s8 ),
    .in_0( s3 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( s5 ),
    .out( V3 )
  );
endmodule
