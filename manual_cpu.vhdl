-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity DIG_RAMDualPort is
  generic (
    Bits : integer;       
    AddrBits : integer ); 
  port (
    D: out std_logic_vector ((Bits-1) downto 0);
    A: in std_logic_vector ((AddrBits-1) downto 0);
    Din: in std_logic_vector ((Bits-1) downto 0);
    str: in std_logic;
    C: in std_logic;
    ld: in std_logic );
end DIG_RAMDualPort;

architecture Behavioral of DIG_RAMDualPort is
    -- CAUTION: uses distributed RAM
    type memoryType is array(0 to (2**AddrBits)-1) of STD_LOGIC_VECTOR((Bits-1) downto 0);
    signal memory : memoryType;
begin
  process ( C )
  begin
    if rising_edge(C) AND (str='1') then
      memory(to_integer(unsigned(A))) <= Din;
    end if;
  end process;
  D <= memory(to_integer(unsigned(A))) when ld='1' else (others => 'Z');
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_2 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic_vector (1 downto 0);
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0);
    in_2: in std_logic_vector ((Bits-1) downto 0);
    in_3: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_2;

architecture Behavioral of MUX_GATE_BUS_2 is
begin
  with sel select
    p_out <=
      in_0 when "00",
      in_1 when "01",
      in_2 when "10",
      in_3 when "11",
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DEMUX_GATE_3 is
  port (
    out_0: out std_logic;
    out_1: out std_logic;
    out_2: out std_logic;
    out_3: out std_logic;
    out_4: out std_logic;
    out_5: out std_logic;
    out_6: out std_logic;
    out_7: out std_logic;
    sel: in std_logic_vector (2 downto 0);
    p_in: in std_logic );
end DEMUX_GATE_3;

architecture Behavioral of DEMUX_GATE_3 is
begin
    out_0 <= p_in when sel = "000" else '0';
    out_1 <= p_in when sel = "001" else '0';
    out_2 <= p_in when sel = "010" else '0';
    out_3 <= p_in when sel = "011" else '0';
    out_4 <= p_in when sel = "100" else '0';
    out_5 <= p_in when sel = "101" else '0';
    out_6 <= p_in when sel = "110" else '0';
    out_7 <= p_in when sel = "111" else '0';
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_Register_BUS is
  generic ( Bits: integer ); 
  port (
    Q: out std_logic_vector ((Bits-1) downto 0);
    D: in std_logic_vector ((Bits-1) downto 0);
    C: in std_logic;
    en: in std_logic );
end DIG_Register_BUS;

architecture Behavioral of DIG_Register_BUS is
  signal state : std_logic_vector ((Bits-1) downto 0) := (others => '0');
begin
   Q <= state;

   process ( C )
   begin
      if rising_edge(C) and (en='1') then
        state <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_3 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic_vector (2 downto 0);
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0);
    in_2: in std_logic_vector ((Bits-1) downto 0);
    in_3: in std_logic_vector ((Bits-1) downto 0);
    in_4: in std_logic_vector ((Bits-1) downto 0);
    in_5: in std_logic_vector ((Bits-1) downto 0);
    in_6: in std_logic_vector ((Bits-1) downto 0);
    in_7: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_3;

architecture Behavioral of MUX_GATE_BUS_3 is
begin
  with sel select
    p_out <=
      in_0 when "000",
      in_1 when "001",
      in_2 when "010",
      in_3 when "011",
      in_4 when "100",
      in_5 when "101",
      in_6 when "110",
      in_7 when "111",
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity reg_file is
  port (
    RS1: in std_logic_vector(2 downto 0); -- The index of the register which should output its value to OUT1.
    RS2: in std_logic_vector(2 downto 0); -- The index of the register which should output its value to OUT2.
    WS: in std_logic_vector(2 downto 0); -- The index of the register which should save the value on IN on the next clock cycle (if WE is high).
    WE: in std_logic; -- Whether the register selected by WS should save the value from IN on the next cycle.
    p_IN: in std_logic_vector(15 downto 0); -- The value to be saved into the register specified by WS if WE is high,
    clk: in std_logic;
    OUT1: out std_logic_vector(15 downto 0); -- The value in the register specified by RS1.
    OUT2: out std_logic_vector(15 downto 0) -- The value in the register specified by RS2.
    );
end reg_file;

architecture Behavioral of reg_file is
  signal s0: std_logic;
  signal s1: std_logic_vector(15 downto 0);
  signal s2: std_logic;
  signal s3: std_logic_vector(15 downto 0);
  signal s4: std_logic;
  signal s5: std_logic_vector(15 downto 0);
  signal s6: std_logic;
  signal s7: std_logic_vector(15 downto 0);
  signal s8: std_logic;
  signal s9: std_logic_vector(15 downto 0);
begin
  gate0: entity work.DEMUX_GATE_3
    port map (
      sel => WS,
      p_in => WE,
      out_0 => s0,
      out_1 => s2,
      out_2 => s4,
      out_3 => s6,
      out_4 => s8);
  gate1: entity work.DIG_Register_BUS -- RZ
    generic map (
      Bits => 16)
    port map (
      D => "0000000000000000",
      C => clk,
      en => s0,
      Q => s1);
  gate2: entity work.DIG_Register_BUS -- R1
    generic map (
      Bits => 16)
    port map (
      D => p_IN,
      C => clk,
      en => s2,
      Q => s3);
  gate3: entity work.DIG_Register_BUS -- R2
    generic map (
      Bits => 16)
    port map (
      D => p_IN,
      C => clk,
      en => s4,
      Q => s5);
  gate4: entity work.DIG_Register_BUS -- R3
    generic map (
      Bits => 16)
    port map (
      D => p_IN,
      C => clk,
      en => s6,
      Q => s7);
  gate5: entity work.DIG_Register_BUS -- R4
    generic map (
      Bits => 16)
    port map (
      D => p_IN,
      C => clk,
      en => s8,
      Q => s9);
  gate6: entity work.MUX_GATE_BUS_3
    generic map (
      Bits => 16)
    port map (
      sel => RS1,
      in_0 => s1,
      in_1 => s3,
      in_2 => s5,
      in_3 => s7,
      in_4 => s9,
      in_5 => "0000000000000000",
      in_6 => "0000000000000000",
      in_7 => "0000000000000000",
      p_out => OUT1);
  gate7: entity work.MUX_GATE_BUS_3
    generic map (
      Bits => 16)
    port map (
      sel => RS2,
      in_0 => s1,
      in_1 => s3,
      in_2 => s5,
      in_3 => s7,
      in_4 => s9,
      in_5 => "0000000000000000",
      in_6 => "0000000000000000",
      in_7 => "0000000000000000",
      p_out => OUT2);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
entity COMP_GATE_SIGNED is
  generic ( Bits : integer );
  port (
    gr: out std_logic;
    eq: out std_logic;
    le: out std_logic;
    a: in std_logic_vector ((Bits-1) downto 0);
    b: in std_logic_vector ((Bits-1) downto 0) );
end COMP_GATE_SIGNED;

architecture Behavioral of COMP_GATE_SIGNED is
begin
  process(a, b)
  begin
    if (signed(a) > signed(b)) then
      le <= '0';
      eq <= '0';
      gr <= '1';
    elsif (signed(a) < signed(b)) then
      le <= '1';
      eq <= '0';
      gr <= '0';
    else
      le <= '0';
      eq <= '1';
      gr <= '0';
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic;
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_1;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

entity DIG_Add is
  generic ( Bits: integer ); 
  port (
    s: out std_logic_vector((Bits-1) downto 0);
    c_o: out std_logic;
    a: in std_logic_vector((Bits-1) downto 0);
    b: in std_logic_vector((Bits-1) downto 0);
    c_i: in std_logic );
end DIG_Add;

architecture Behavioral of DIG_Add is
   signal temp : std_logic_vector(Bits downto 0);
begin
   temp <= ('0' & a) + b + c_i;

   s    <= temp((Bits-1) downto 0);
   c_o  <= temp(Bits);
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity ripple_carry_adder_overflow is
  port (
    A: in std_logic_vector(15 downto 0);
    B: in std_logic_vector(15 downto 0);
    C_in: in std_logic;
    Q: out std_logic_vector(15 downto 0);
    C_out: out std_logic;
    V: out std_logic);
end ripple_carry_adder_overflow;

architecture Behavioral of ripple_carry_adder_overflow is
  signal s0: std_logic_vector(14 downto 0);
  signal s1: std_logic_vector(14 downto 0);
  signal s2: std_logic_vector(14 downto 0);
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal C_out_temp: std_logic;
begin
  s0 <= A(14 downto 0);
  s4 <= A(15);
  s1 <= B(14 downto 0);
  s5 <= B(15);
  gate0: entity work.DIG_Add
    generic map (
      Bits => 15)
    port map (
      a => s0,
      b => s1,
      c_i => C_in,
      s => s2,
      c_o => s3);
  gate1: entity work.DIG_Add
    generic map (
      Bits => 1)
    port map (
      a => s4,
      b => s5,
      c_i => s3,
      s => s6,
      c_o => C_out_temp);
  Q(14 downto 0) <= s2;
  Q(15) <= s6;
  V <= (C_out_temp XOR s3);
  C_out <= C_out_temp;
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_1 is
  port (
    p_out: out std_logic;
    sel: in std_logic;
    
    in_0: in std_logic;
    in_1: in std_logic );
end MUX_GATE_1;

architecture Behavioral of MUX_GATE_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      '0' when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity alu is
  port (
    A: in std_logic_vector(15 downto 0); -- First input to ALU
    B: in std_logic_vector(15 downto 0); -- Second input to ALU
    ALUOP: in std_logic_vector(1 downto 0); -- Operation selection input
    RESULT: out std_logic_vector(15 downto 0); -- The result of this ALU operation
    FLAG: out std_logic_vector(3 downto 0) -- The flags associated with the result of this ALU operation
                                           -- 
                                           -- 0. Z (zero)
                                           -- 1. N (negative)
                                           -- 2. C (carry)
                                           -- 3. V (overflow)
    );
end alu;

architecture Behavioral of alu is
  signal RESULT_temp: std_logic_vector(15 downto 0);
  signal s0: std_logic_vector(15 downto 0);
  signal s1: std_logic;
  signal s2: std_logic_vector(15 downto 0);
  signal s3: std_logic_vector(15 downto 0);
  signal s4: std_logic_vector(15 downto 0);
  signal s5: std_logic_vector(15 downto 0);
  signal s6: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic;
  signal C_out: std_logic;
  signal V: std_logic;
begin
  s0 <= NOT B;
  gate0: entity work.COMP_GATE_SIGNED
    generic map (
      Bits => 2)
    port map (
      a => "01",
      b => ALUOP,
      eq => s1);
  s10 <= ALUOP(1);
  gate1: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => s1,
      in_0 => B,
      in_1 => s0,
      p_out => s2);
  s3 <= (A OR s2);
  s5 <= (A AND s2);
  gate2: entity work.ripple_carry_adder_overflow
    port map (
      A => A,
      B => s2,
      C_in => s1,
      Q => s4,
      C_out => C_out,
      V => V);
  gate3: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 16)
    port map (
      sel => ALUOP,
      in_0 => s4,
      in_1 => s4,
      in_2 => s5,
      in_3 => s3,
      p_out => RESULT_temp);
  gate4: entity work.MUX_GATE_1
    port map (
      sel => s10,
      in_0 => C_out,
      in_1 => '0',
      p_out => s8);
  gate5: entity work.MUX_GATE_1
    port map (
      sel => s10,
      in_0 => V,
      in_1 => '0',
      p_out => s9);
  gate6: entity work.COMP_GATE_SIGNED
    generic map (
      Bits => 16)
    port map (
      a => RESULT_temp,
      b => "0000000000000000",
      eq => s6,
      le => s7);
  FLAG(0) <= s6;
  FLAG(1) <= s7;
  FLAG(2) <= s8;
  FLAG(3) <= s9;
  RESULT <= RESULT_temp;
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    CLK: in std_logic;
    RS1: in std_logic_vector(2 downto 0);
    RS2: in std_logic_vector(2 downto 0);
    WS: in std_logic_vector(2 downto 0);
    STR: in std_logic;
    LDR: in std_logic;
    WE: in std_logic;
    p_IN: in std_logic_vector(15 downto 0);
    ALUOP: in std_logic_vector(1 downto 0);
    DMUX: in std_logic_vector(1 downto 0);
    Z: out std_logic;
    N: out std_logic;
    C: out std_logic;
    V: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic_vector(15 downto 0);
  signal s1: std_logic_vector(15 downto 0);
  signal s2: std_logic_vector(15 downto 0);
  signal s3: std_logic_vector(15 downto 0);
  signal s4: std_logic_vector(15 downto 0);
  signal s5: std_logic_vector(3 downto 0);
begin
  gate0: entity work.DIG_RAMDualPort -- RAM
    generic map (
      Bits => 16,
      AddrBits => 16)
    port map (
      A => s0,
      Din => s1,
      str => STR,
      C => CLK,
      ld => LDR,
      D => s2);
  gate1: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 16)
    port map (
      sel => DMUX,
      in_0 => s3,
      in_1 => s2,
      in_2 => p_IN,
      in_3 => "0000000000000000",
      p_out => s4);
  gate2: entity work.reg_file
    port map (
      RS1 => RS1,
      RS2 => RS2,
      WS => WS,
      WE => WE,
      p_IN => s4,
      clk => CLK,
      OUT1 => s0,
      OUT2 => s1);
  gate3: entity work.alu
    port map (
      A => s0,
      B => s1,
      ALUOP => ALUOP,
      RESULT => s3,
      FLAG => s5);
  Z <= s5(0);
  N <= s5(1);
  C <= s5(2);
  V <= s5(3);
end Behavioral;
