/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module LUT_OpcodeCL (
    input \0 ,
    input \1 ,
    input \2 ,
    input \3 ,
    output reg  [12:0]  out
);
    reg [12:0] my_lut [0:15];
    wire [3:0] temp;
    assign temp = {\3 , \2 , \1 , \0 };

    always @ (*) begin
       out = my_lut[temp];
    end

    initial begin
        my_lut[0] = 13'h28;
        my_lut[1] = 13'h1028;
        my_lut[2] = 13'h0;
        my_lut[3] = 13'h0;
        my_lut[4] = 13'h4cc;
        my_lut[5] = 13'h534;
        my_lut[6] = 13'h0;
        my_lut[7] = 13'h0;
        my_lut[8] = 13'hda0;
        my_lut[9] = 13'hda1;
        my_lut[10] = 13'hda2;
        my_lut[11] = 13'hda3;
        my_lut[12] = 13'h0;
        my_lut[13] = 13'h0;
        my_lut[14] = 13'h0;
        my_lut[15] = 13'h0;
    end
endmodule


module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module control_unit (
  input [15:0] INST,
  input FL_Z,
  output [1:0] ALUOP,
  output [2:0] RS1,
  output [2:0] RS2,
  output [2:0] WS,
  output STR,
  output WE,
  output [1:0] DMUX,
  output LDR,
  output FL_EN,
  output HE
);
  wire [2:0] s0;
  wire [2:0] s1;
  wire [2:0] s2;
  wire [3:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [12:0] s8;
  wire [1:0] s9;
  wire [2:0] s10;
  wire [1:0] s11;
  wire [2:0] s12;
  wire [1:0] s13;
  wire [1:0] s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  assign s20 = (~ INST[11] | FL_Z);
  assign s0 = INST[10:8];
  assign s1 = INST[6:4];
  assign s2 = INST[2:0];
  assign s3 = INST[15:12];
  Mux_2x1_NBits #(
    .Bits(3)
  )
  Mux_2x1_NBits_i0 (
    .sel( s20 ),
    .in_0( 3'b0 ),
    .in_1( s0 ),
    .out( WS )
  );
  assign s4 = s3[0];
  assign s5 = s3[1];
  assign s6 = s3[2];
  assign s7 = s3[3];
  // OpcodeCL
  LUT_OpcodeCL LUT_OpcodeCL_i1 (
    .\0 ( s4 ),
    .\1 ( s5 ),
    .\2 ( s6 ),
    .\3 ( s7 ),
    .out( s8 )
  );
  assign s13 = s8[1:0];
  assign s14 = s8[3:2];
  assign s15 = s8[4];
  assign s16 = s8[5];
  assign s17 = s8[6];
  assign s11 = s8[8:7];
  assign s9 = s8[10:9];
  assign s18 = s8[11];
  assign s19 = s8[12];
  Mux_4x1_NBits #(
    .Bits(3)
  )
  Mux_4x1_NBits_i2 (
    .sel( s9 ),
    .in_0( 3'b0 ),
    .in_1( s0 ),
    .in_2( s1 ),
    .in_3( s2 ),
    .out( s10 )
  );
  Mux_4x1_NBits #(
    .Bits(3)
  )
  Mux_4x1_NBits_i3 (
    .sel( s11 ),
    .in_0( 3'b0 ),
    .in_1( s0 ),
    .in_2( s1 ),
    .in_3( s2 ),
    .out( s12 )
  );
  Mux_2x1 Mux_2x1_i4 (
    .sel( s20 ),
    .in_0( 1'b0 ),
    .in_1( s18 ),
    .out( FL_EN )
  );
  Mux_2x1 Mux_2x1_i5 (
    .sel( s20 ),
    .in_0( 1'b0 ),
    .in_1( s17 ),
    .out( STR )
  );
  Mux_2x1 Mux_2x1_i6 (
    .sel( s20 ),
    .in_0( 1'b0 ),
    .in_1( s16 ),
    .out( WE )
  );
  Mux_2x1 Mux_2x1_i7 (
    .sel( s20 ),
    .in_0( 1'b0 ),
    .in_1( s15 ),
    .out( LDR )
  );
  Mux_2x1_NBits #(
    .Bits(2)
  )
  Mux_2x1_NBits_i8 (
    .sel( s20 ),
    .in_0( 2'b0 ),
    .in_1( s14 ),
    .out( DMUX )
  );
  Mux_2x1_NBits #(
    .Bits(2)
  )
  Mux_2x1_NBits_i9 (
    .sel( s20 ),
    .in_0( 2'b0 ),
    .in_1( s13 ),
    .out( ALUOP )
  );
  Mux_2x1 Mux_2x1_i10 (
    .sel( s20 ),
    .in_0( 1'b0 ),
    .in_1( s19 ),
    .out( HE )
  );
  Mux_2x1_NBits #(
    .Bits(3)
  )
  Mux_2x1_NBits_i11 (
    .sel( s20 ),
    .in_0( 3'b0 ),
    .in_1( s10 ),
    .out( RS1 )
  );
  Mux_2x1_NBits #(
    .Bits(3)
  )
  Mux_2x1_NBits_i12 (
    .sel( s20 ),
    .in_0( 3'b0 ),
    .in_1( s12 ),
    .out( RS2 )
  );
endmodule
