-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity COMP_GATE_UNSIGNED is
  generic ( Bits : integer );
  port (
    gr: out std_logic;
    eq: out std_logic;
    le: out std_logic;
    a: in std_logic_vector ((Bits-1) downto 0);
    b: in std_logic_vector ((Bits-1) downto 0) );
end COMP_GATE_UNSIGNED;

architecture Behavioral of COMP_GATE_UNSIGNED is
begin
  process(a, b)
  begin
    if (a > b ) then
      le <= '0';
      eq <= '0';
      gr <= '1';
    elsif (a < b) then
      le <= '1';
      eq <= '0';
      gr <= '0';
    else
      le <= '0';
      eq <= '1';
      gr <= '0';
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity data_hazard_forwarding is
  port (
    I_3: in std_logic;
    I_2: in std_logic;
    I_1: in std_logic;
    I_0: in std_logic;
    ForwardE: out std_logic_vector(1 downto 0));
end data_hazard_forwarding;

architecture Behavioral of data_hazard_forwarding is
begin
  ForwardE(0) <= ((I_3 AND NOT I_1 AND I_0) OR (I_3 AND NOT I_2 AND I_0));
  ForwardE(1) <= (I_2 AND I_1);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic;
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_1;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    RA1D: in std_logic_vector(15 downto 0);
    RA2D: in std_logic_vector(15 downto 0);
    WA3E: in std_logic_vector(15 downto 0);
    MemtoRegE: in std_logic;
    PCSrcD: in std_logic;
    PCSrcE: in std_logic;
    PCSrcM: in std_logic;
    PCSrcW: in std_logic;
    BranchTakenE: in std_logic;
    RegWriteM: in std_logic;
    RegWriteW: in std_logic;
    RA1E: in std_logic_vector(15 downto 0);
    RA2E: in std_logic_vector(15 downto 0);
    WA3M: in std_logic_vector(15 downto 0);
    WA3W: in std_logic_vector(15 downto 0);
    ALUSrcE: in std_logic;
    StallF: out std_logic;
    StallD: out std_logic;
    FlushD: out std_logic;
    FlushE: out std_logic;
    ForwardBE: out std_logic_vector(1 downto 0);
    ForwardAE: out std_logic_vector(1 downto 0));
end main;

architecture Behavioral of main is
  signal s0: std_logic;
  signal s1: std_logic;
  signal StallD_temp: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic_vector(1 downto 0);
  signal s8: std_logic_vector(1 downto 0);
  signal s9: std_logic;
  signal s10: std_logic;
  signal s11: std_logic;
  signal s12: std_logic;
begin
  gate0: entity work.COMP_GATE_UNSIGNED -- Match1D_E
    generic map (
      Bits => 16)
    port map (
      a => RA1D,
      b => WA3E,
      eq => s0);
  gate1: entity work.COMP_GATE_UNSIGNED -- Match2DE
    generic map (
      Bits => 16)
    port map (
      a => RA2D,
      b => WA3E,
      eq => s1);
  s2 <= (PCSrcM OR PCSrcE OR PCSrcD);
  gate2: entity work.COMP_GATE_UNSIGNED -- Match1_EM
    generic map (
      Bits => 16)
    port map (
      a => WA3M,
      b => RA1E,
      eq => s3);
  gate3: entity work.COMP_GATE_UNSIGNED -- Match1_EW
    generic map (
      Bits => 16)
    port map (
      a => WA3W,
      b => RA1E,
      eq => s4);
  gate4: entity work.COMP_GATE_UNSIGNED -- Match2_EM
    generic map (
      Bits => 16)
    port map (
      a => WA3M,
      b => RA2E,
      eq => s5);
  gate5: entity work.COMP_GATE_UNSIGNED -- Match2_EW
    generic map (
      Bits => 16)
    port map (
      a => WA3W,
      b => RA2E,
      eq => s6);
  gate6: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a => RA2E,
      b => "0000000000000000",
      le => s11);
  gate7: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a => RA1E,
      b => "0000000000000000",
      le => s12);
  StallD_temp <= ((s0 OR s1) AND MemtoRegE);
  FlushD <= (PCSrcW OR s2 OR BranchTakenE);
  gate8: entity work.data_hazard_forwarding
    port map (
      I_3 => s4,
      I_2 => s3,
      I_1 => RegWriteM,
      I_0 => RegWriteW,
      ForwardE => s7);
  gate9: entity work.data_hazard_forwarding
    port map (
      I_3 => s6,
      I_2 => s5,
      I_1 => RegWriteM,
      I_0 => RegWriteW,
      ForwardE => s8);
  s9 <= (s12 OR ALUSrcE);
  s10 <= (s11 OR ALUSrcE);
  StallF <= (s2 OR StallD_temp);
  FlushE <= (BranchTakenE OR StallD_temp);
  gate10: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 2)
    port map (
      sel => s9,
      in_0 => s7,
      in_1 => "00",
      p_out => ForwardAE);
  gate11: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 2)
    port map (
      sel => s10,
      in_0 => s8,
      in_1 => "00",
      p_out => ForwardBE);
  StallD <= StallD_temp;
end Behavioral;
