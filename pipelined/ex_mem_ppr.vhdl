-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_Register is
  
  port (
    Q: out std_logic;
    D: in std_logic;
    C: in std_logic;
    en: in std_logic );
end DIG_Register;

architecture Behavioral of DIG_Register is
  signal state : std_logic := '0';
begin
   Q <= state;

   process ( C )
   begin
      if rising_edge(C) and (en='1') then
        state <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_Register_BUS is
  generic ( Bits: integer ); 
  port (
    Q: out std_logic_vector ((Bits-1) downto 0);
    D: in std_logic_vector ((Bits-1) downto 0);
    C: in std_logic;
    en: in std_logic );
end DIG_Register_BUS;

architecture Behavioral of DIG_Register_BUS is
  signal state : std_logic_vector ((Bits-1) downto 0) := (others => '0');
begin
   Q <= state;

   process ( C )
   begin
      if rising_edge(C) and (en='1') then
        state <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    CLK: in std_logic;
    PCSrcE: in std_logic;
    RegWriteE: in std_logic;
    MemToRegE: in std_logic;
    MemWriteE: in std_logic;
    ALUResultE: in std_logic_vector(15 downto 0);
    WriteDataE: in std_logic_vector(15 downto 0);
    WAE: in std_logic_vector(2 downto 0);
    LDRE: in std_logic;
    sethE: in std_logic;
    PCSrcM: out std_logic;
    RegWriteM: out std_logic;
    MemToReg: out std_logic;
    MemWriteM: out std_logic;
    ALUResultM: out std_logic_vector(15 downto 0);
    WriteDataM: out std_logic_vector(15 downto 0);
    WA3M: out std_logic_vector(2 downto 0);
    LDRM: out std_logic;
    sethM: out std_logic);
end main;

architecture Behavioral of main is
begin
  gate0: entity work.DIG_Register -- PCSrc
    port map (
      D => PCSrcE,
      C => CLK,
      en => '1',
      Q => PCSrcM);
  gate1: entity work.DIG_Register -- RegWrite
    port map (
      D => RegWriteE,
      C => CLK,
      en => '1',
      Q => RegWriteM);
  gate2: entity work.DIG_Register -- MemToReg
    port map (
      D => MemToRegE,
      C => CLK,
      en => '1',
      Q => MemToReg);
  gate3: entity work.DIG_Register -- MemWrite
    port map (
      D => MemWriteE,
      C => CLK,
      en => '1',
      Q => MemWriteM);
  gate4: entity work.DIG_Register_BUS -- ALUResult
    generic map (
      Bits => 16)
    port map (
      D => ALUResultE,
      C => CLK,
      en => '1',
      Q => ALUResultM);
  gate5: entity work.DIG_Register_BUS -- WriteData
    generic map (
      Bits => 16)
    port map (
      D => WriteDataE,
      C => CLK,
      en => '1',
      Q => WriteDataM);
  gate6: entity work.DIG_Register_BUS -- WA
    generic map (
      Bits => 3)
    port map (
      D => WAE,
      C => CLK,
      en => '1',
      Q => WA3M);
  gate7: entity work.DIG_Register -- LDR
    port map (
      D => LDRE,
      C => CLK,
      en => '1',
      Q => LDRM);
  gate8: entity work.DIG_Register -- setHE
    port map (
      D => sethE,
      C => CLK,
      en => '1',
      Q => sethM);
end Behavioral;
