-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity COMP_GATE_UNSIGNED is
  generic ( Bits : integer );
  port (
    gr: out std_logic;
    eq: out std_logic;
    le: out std_logic;
    a: in std_logic_vector ((Bits-1) downto 0);
    b: in std_logic_vector ((Bits-1) downto 0) );
end COMP_GATE_UNSIGNED;

architecture Behavioral of COMP_GATE_UNSIGNED is
begin
  process(a, b)
  begin
    if (a > b ) then
      le <= '0';
      eq <= '0';
      gr <= '1';
    elsif (a < b) then
      le <= '1';
      eq <= '0';
      gr <= '0';
    else
      le <= '0';
      eq <= '1';
      gr <= '0';
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.ALL;

entity DIG_LUT_OpcodeCL is
  port (
    n0: in std_logic;
    n1: in std_logic;
    n2: in std_logic;
    n3: in std_logic;

    p_out: out std_logic_vector (11 downto 0)
);
end DIG_LUT_OpcodeCL;

architecture Behavioral of DIG_LUT_OpcodeCL is
  type mem is array ( 0 to 15) of std_logic_vector (11 downto 0);
  constant my_lut : mem := (
    "010000010000", "010000010100", "000000000000", "000000000000", 
    "000100000000", "011000000001", "000000000000", "000000000000", 
    "010000001010", "010001001010", "010010001010", "010011001010", 
    "000000000000", "000000000000", "000000000000", "000000000000"
    );
  signal temp : std_logic_vector(3 downto 0);
begin
  temp <= n3 & n2 & n1 & n0;
  p_out <= my_lut(to_integer(unsigned(temp)));
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_1 is
  port (
    p_out: out std_logic;
    sel: in std_logic;
    
    in_0: in std_logic;
    in_1: in std_logic );
end MUX_GATE_1;

architecture Behavioral of MUX_GATE_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      '0' when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic;
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_1;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    INST: in std_logic_vector(15 downto 0);
    FlagWriteD: out std_logic;
    ALUSrcD: out std_logic;
    BranchD: out std_logic;
    ALUCtrlD: out std_logic_vector(1 downto 0);
    MemWriteD: out std_logic;
    MemToRegD: out std_logic;
    RegWriteD: out std_logic;
    PCSrcD: out std_logic;
    SethD: out std_logic;
    FlagEN: out std_logic;
    LDR: out std_logic;
    InsertNOP: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic_vector(2 downto 0);
  signal s1: std_logic_vector(3 downto 0);
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic_vector(11 downto 0);
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic_vector(1 downto 0);
  signal s11: std_logic;
  signal s12: std_logic;
  signal s13: std_logic;
  signal s14: std_logic;
  signal s15: std_logic;
  signal s16: std_logic;
  signal InsertNOP_temp: std_logic;
  signal s17: std_logic;
  signal s18: std_logic_vector(1 downto 0);
  signal s19: std_logic;
begin
  s18(0) <= '0';
  s18(1) <= '0';
  gate0: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a => "0000000000000000",
      b => INST,
      eq => InsertNOP_temp);
  s0 <= INST(10 downto 8);
  s1 <= INST(15 downto 12);
  gate1: entity work.COMP_GATE_UNSIGNED -- Is Rd PC
    generic map (
      Bits => 3)
    port map (
      a => s0,
      b => "111",
      eq => s16);
  s2 <= s1(0);
  s3 <= s1(1);
  s4 <= s1(2);
  s5 <= s1(3);
  gate2: entity work.DIG_LUT_OpcodeCL -- OpcodeCL
    port map (
      n0 => s2,
      n1 => s3,
      n2 => s4,
      n3 => s5,
      p_out => s6);
  s17 <= (s16 OR s6(11));
  s19 <= (s16 OR s6(5));
  s7 <= s6(10);
  s8 <= s6(9);
  s9 <= s6(8);
  s10 <= s6(7 downto 6);
  s11 <= s6(4);
  s12 <= s6(3);
  s13 <= s6(2);
  s14 <= s6(1);
  s15 <= s6(0);
  gate3: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s17,
      in_1 => '0',
      p_out => PCSrcD);
  gate4: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s7,
      in_1 => '0',
      p_out => RegWriteD);
  gate5: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s8,
      in_1 => '0',
      p_out => MemToRegD);
  gate6: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s9,
      in_1 => '0',
      p_out => MemWriteD);
  gate7: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 2)
    port map (
      sel => InsertNOP_temp,
      in_0 => s10,
      in_1 => s18,
      p_out => ALUCtrlD);
  gate8: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s19,
      in_1 => '0',
      p_out => BranchD);
  gate9: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s11,
      in_1 => '0',
      p_out => ALUSrcD);
  gate10: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s12,
      in_1 => '0',
      p_out => FlagWriteD);
  gate11: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s13,
      in_1 => '0',
      p_out => SethD);
  gate12: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s14,
      in_1 => '0',
      p_out => FlagEN);
  gate13: entity work.MUX_GATE_1
    port map (
      sel => InsertNOP_temp,
      in_0 => s15,
      in_1 => '0',
      p_out => LDR);
  InsertNOP <= InsertNOP_temp;
end Behavioral;
