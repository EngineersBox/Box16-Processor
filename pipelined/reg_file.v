/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Demux3
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    input [2:0] sel,
    input in
);
    assign out_0 = (sel == 3'h0)? in : 'd0;
    assign out_1 = (sel == 3'h1)? in : 'd0;
    assign out_2 = (sel == 3'h2)? in : 'd0;
    assign out_3 = (sel == 3'h3)? in : 'd0;
    assign out_4 = (sel == 3'h4)? in : 'd0;
    assign out_5 = (sel == 3'h5)? in : 'd0;
    assign out_6 = (sel == 3'h6)? in : 'd0;
    assign out_7 = (sel == 3'h7)? in : 'd0;
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module high_mask_in (
  input [15:0] D_HIGH,
  input [15:0] D,
  input EN,
  output [15:0] Q
);
  wire [15:0] s0;
  assign s0[7:0] = D[7:0];
  assign s0[15:8] = D_HIGH[7:0];
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i0 (
    .sel( EN ),
    .in_0( D_HIGH ),
    .in_1( s0 ),
    .out( Q )
  );
endmodule

module reg_file (
  input [2:0] RS1, // The index of the register which should output its value to OUT1.
  input [2:0] RS2, // The index of the register which should output its value to OUT2.
  input [2:0] WS, // The index of the register which should save the value on IN on the next clock cycle (if WE is high).
  input WE, // Whether the register selected by WS should save the value from IN on the next cycle.
  input [15:0] IN, // The value to be saved into the register specified by WS if WE is high,
  input CLK,
  input [15:0] FL_IN, // The value to be saved into the register specified by WS if WE is high,
  input FL_EN, // Whether the register selected by WS should save the value from IN on the next cycle.
  input [15:0] PC_IN,
  input HE,
  output [15:0] OUT1, // The value in the register specified by RS1.
  output [15:0] OUT2 // The value in the register specified by RS2.

);
  wire [15:0] s0;
  wire s1;
  wire [15:0] s2;
  wire [15:0] s3;
  wire s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire s7;
  wire [15:0] s8;
  wire [15:0] s9;
  wire s10;
  wire [15:0] s11;
  wire [15:0] s12;
  wire [15:0] s13;
  wire s14;
  wire s15;
  wire [15:0] s16;
  wire s17;
  wire [15:0] s18;
  Demux3 Demux3_i0 (
    .sel( WS ),
    .in( WE ),
    .out_1( s1 ),
    .out_2( s4 ),
    .out_3( s7 ),
    .out_4( s10 ),
    .out_5( s14 ),
    .out_7( s15 )
  );
  assign s17 = (s14 | FL_EN);
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i1 (
    .sel( s15 ),
    .in_0( PC_IN ),
    .in_1( IN ),
    .out( s18 )
  );
  // R1
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i2 (
    .D( s0 ),
    .C( CLK ),
    .en( s1 ),
    .Q( s2 )
  );
  // R2
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i3 (
    .D( s3 ),
    .C( CLK ),
    .en( s4 ),
    .Q( s5 )
  );
  // R3
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i4 (
    .D( s6 ),
    .C( CLK ),
    .en( s7 ),
    .Q( s8 )
  );
  // R4
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i5 (
    .D( s9 ),
    .C( CLK ),
    .en( s10 ),
    .Q( s11 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i6 (
    .sel( RS1 ),
    .in_0( 16'b0 ),
    .in_1( s2 ),
    .in_2( s5 ),
    .in_3( s8 ),
    .in_4( s11 ),
    .in_5( s12 ),
    .in_6( 16'b0 ),
    .in_7( s13 ),
    .out( OUT1 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i7 (
    .sel( RS2 ),
    .in_0( 16'b0 ),
    .in_1( s2 ),
    .in_2( s5 ),
    .in_3( s8 ),
    .in_4( s11 ),
    .in_5( s12 ),
    .in_6( 16'b0 ),
    .in_7( s13 ),
    .out( OUT2 )
  );
  // FL
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i8 (
    .D( s16 ),
    .C( CLK ),
    .en( s17 ),
    .Q( s12 )
  );
  high_mask_in high_mask_in_i9 (
    .D_HIGH( IN ),
    .D( s2 ),
    .EN( HE ),
    .Q( s0 )
  );
  high_mask_in high_mask_in_i10 (
    .D_HIGH( IN ),
    .D( s5 ),
    .EN( HE ),
    .Q( s3 )
  );
  high_mask_in high_mask_in_i11 (
    .D_HIGH( IN ),
    .D( s8 ),
    .EN( HE ),
    .Q( s6 )
  );
  high_mask_in high_mask_in_i12 (
    .D_HIGH( IN ),
    .D( s11 ),
    .EN( HE ),
    .Q( s9 )
  );
  high_mask_in high_mask_in_i13 (
    .D_HIGH( FL_IN ),
    .D( s12 ),
    .EN( HE ),
    .Q( s16 )
  );
  high_mask_in high_mask_in_i14 (
    .D_HIGH( s18 ),
    .D( s13 ),
    .EN( HE ),
    .Q( s13 )
  );
endmodule
