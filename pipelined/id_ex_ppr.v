/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Register
(
    input C,
    input en,
    input D,
    output Q
);

    reg  state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module id_ex_ppr (
  input CondD,
  input [15:0] Ra1D,
  input [15:0] Ra2D,
  input [15:0] SEI16D,
  input CLK,
  input [2:0] WAD,
  input [3:0] FlagsD,
  input PCSrcD,
  input RegWriteD,
  input MemToRegD,
  input [1:0] ALUCtrlD,
  input BranchD,
  input ALUSrcD,
  input FlagWriteD,
  input MemWriteD,
  input LDRD,
  input SethD,
  input [15:0] Rd1D,
  input [15:0] Rd2D,
  input CLR,
  output CondE,
  output [15:0] Ra1E,
  output [15:0] Ra2E,
  output [15:0] SEI16E,
  output [2:0] WAE,
  output [3:0] FlagsE,
  output PCSrcE,
  output RegWriteE,
  output MemToRegE,
  output [1:0] ALUCtrlE,
  output BranchE,
  output ALUSrcE,
  output FlagWriteE,
  output MemWriteE,
  output LDRE,
  output SethE,
  output [15:0] Rd1E,
  output [15:0] Rd2E
);
  wire [15:0] s0;
  wire [15:0] s1;
  wire [15:0] s2;
  wire [2:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  // Cond
  DIG_Register DIG_Register_i0 (
    .D( CondD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( CondE )
  );
  // Flags
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i1 (
    .D( FlagsD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( FlagsE )
  );
  // PCSrc
  DIG_Register DIG_Register_i2 (
    .D( PCSrcD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( PCSrcE )
  );
  // RegWrite
  DIG_Register DIG_Register_i3 (
    .D( RegWriteD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( RegWriteE )
  );
  // MemToReg
  DIG_Register DIG_Register_i4 (
    .D( MemToRegD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( MemToRegE )
  );
  // ALUCtrl
  DIG_Register_BUS #(
    .Bits(2)
  )
  DIG_Register_BUS_i5 (
    .D( ALUCtrlD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( ALUCtrlE )
  );
  // BranchD
  DIG_Register DIG_Register_i6 (
    .D( BranchD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( BranchE )
  );
  // ALUSrc
  DIG_Register DIG_Register_i7 (
    .D( ALUSrcD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( ALUSrcE )
  );
  // FlagWrite
  DIG_Register DIG_Register_i8 (
    .D( FlagWriteD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( FlagWriteE )
  );
  // MemWrite
  DIG_Register DIG_Register_i9 (
    .D( MemWriteD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( MemWriteE )
  );
  // LDR
  DIG_Register DIG_Register_i10 (
    .D( LDRD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( LDRE )
  );
  // SethD
  DIG_Register DIG_Register_i11 (
    .D( SethD ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( SethE )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i12 (
    .sel( CLR ),
    .in_0( Rd2D ),
    .in_1( 16'b0 ),
    .out( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i13 (
    .sel( CLR ),
    .in_0( Rd1D ),
    .in_1( 16'b0 ),
    .out( s4 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i14 (
    .sel( CLR ),
    .in_0( Ra2D ),
    .in_1( 16'b0 ),
    .out( s1 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i15 (
    .sel( CLR ),
    .in_0( Ra1D ),
    .in_1( 16'b0 ),
    .out( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i16 (
    .sel( CLR ),
    .in_0( SEI16D ),
    .in_1( 16'b0 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(3)
  )
  Mux_2x1_NBits_i17 (
    .sel( CLR ),
    .in_0( WAD ),
    .in_1( 3'b0 ),
    .out( s3 )
  );
  // Ra1
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i18 (
    .D( s0 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( Ra1E )
  );
  // Ra2
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i19 (
    .D( s1 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( Ra2E )
  );
  // SEI16
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i20 (
    .D( s2 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( SEI16E )
  );
  // WA
  DIG_Register_BUS #(
    .Bits(3)
  )
  DIG_Register_BUS_i21 (
    .D( s3 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( WAE )
  );
  // Rd1
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i22 (
    .D( s4 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( Rd1E )
  );
  // Rd2
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i23 (
    .D( s5 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( Rd2E )
  );
endmodule
