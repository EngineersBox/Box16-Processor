-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_Register is
  
  port (
    Q: out std_logic;
    D: in std_logic;
    C: in std_logic;
    en: in std_logic );
end DIG_Register;

architecture Behavioral of DIG_Register is
  signal state : std_logic := '0';
begin
   Q <= state;

   process ( C )
   begin
      if rising_edge(C) and (en='1') then
        state <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_Register_BUS is
  generic ( Bits: integer ); 
  port (
    Q: out std_logic_vector ((Bits-1) downto 0);
    D: in std_logic_vector ((Bits-1) downto 0);
    C: in std_logic;
    en: in std_logic );
end DIG_Register_BUS;

architecture Behavioral of DIG_Register_BUS is
  signal state : std_logic_vector ((Bits-1) downto 0) := (others => '0');
begin
   Q <= state;

   process ( C )
   begin
      if rising_edge(C) and (en='1') then
        state <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic;
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_1;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    CondD: in std_logic;
    Ra1D: in std_logic_vector(15 downto 0);
    Ra2D: in std_logic_vector(15 downto 0);
    SEI16D: in std_logic_vector(15 downto 0);
    CLK: in std_logic;
    WAD: in std_logic_vector(2 downto 0);
    FlagsD: in std_logic_vector(3 downto 0);
    PCSrcD: in std_logic;
    RegWriteD: in std_logic;
    MemToRegD: in std_logic;
    ALUCtrlD: in std_logic_vector(1 downto 0);
    BranchD: in std_logic;
    ALUSrcD: in std_logic;
    FlagWriteD: in std_logic;
    MemWriteD: in std_logic;
    LDRD: in std_logic;
    SethD: in std_logic;
    Rd1D: in std_logic_vector(15 downto 0);
    Rd2D: in std_logic_vector(15 downto 0);
    CLR: in std_logic;
    CondE: out std_logic;
    Ra1E: out std_logic_vector(15 downto 0);
    Ra2E: out std_logic_vector(15 downto 0);
    SEI16E: out std_logic_vector(15 downto 0);
    WAE: out std_logic_vector(2 downto 0);
    FlagsE: out std_logic_vector(3 downto 0);
    PCSrcE: out std_logic;
    RegWriteE: out std_logic;
    MemToRegE: out std_logic;
    ALUCtrlE: out std_logic_vector(1 downto 0);
    BranchE: out std_logic;
    ALUSrcE: out std_logic;
    FlagWriteE: out std_logic;
    MemWriteE: out std_logic;
    LDRE: out std_logic;
    SethE: out std_logic;
    Rd1E: out std_logic_vector(15 downto 0);
    Rd2E: out std_logic_vector(15 downto 0));
end main;

architecture Behavioral of main is
  signal s0: std_logic_vector(15 downto 0);
  signal s1: std_logic_vector(15 downto 0);
  signal s2: std_logic_vector(15 downto 0);
  signal s3: std_logic_vector(2 downto 0);
  signal s4: std_logic_vector(15 downto 0);
  signal s5: std_logic_vector(15 downto 0);
begin
  gate0: entity work.DIG_Register -- Cond
    port map (
      D => CondD,
      C => CLK,
      en => '1',
      Q => CondE);
  gate1: entity work.DIG_Register_BUS -- Flags
    generic map (
      Bits => 4)
    port map (
      D => FlagsD,
      C => CLK,
      en => '1',
      Q => FlagsE);
  gate2: entity work.DIG_Register -- PCSrc
    port map (
      D => PCSrcD,
      C => CLK,
      en => '1',
      Q => PCSrcE);
  gate3: entity work.DIG_Register -- RegWrite
    port map (
      D => RegWriteD,
      C => CLK,
      en => '1',
      Q => RegWriteE);
  gate4: entity work.DIG_Register -- MemToReg
    port map (
      D => MemToRegD,
      C => CLK,
      en => '1',
      Q => MemToRegE);
  gate5: entity work.DIG_Register_BUS -- ALUCtrl
    generic map (
      Bits => 2)
    port map (
      D => ALUCtrlD,
      C => CLK,
      en => '1',
      Q => ALUCtrlE);
  gate6: entity work.DIG_Register -- BranchD
    port map (
      D => BranchD,
      C => CLK,
      en => '1',
      Q => BranchE);
  gate7: entity work.DIG_Register -- ALUSrc
    port map (
      D => ALUSrcD,
      C => CLK,
      en => '1',
      Q => ALUSrcE);
  gate8: entity work.DIG_Register -- FlagWrite
    port map (
      D => FlagWriteD,
      C => CLK,
      en => '1',
      Q => FlagWriteE);
  gate9: entity work.DIG_Register -- MemWrite
    port map (
      D => MemWriteD,
      C => CLK,
      en => '1',
      Q => MemWriteE);
  gate10: entity work.DIG_Register -- LDR
    port map (
      D => LDRD,
      C => CLK,
      en => '1',
      Q => LDRE);
  gate11: entity work.DIG_Register -- SethD
    port map (
      D => SethD,
      C => CLK,
      en => '1',
      Q => SethE);
  gate12: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => CLR,
      in_0 => Rd2D,
      in_1 => "0000000000000000",
      p_out => s5);
  gate13: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => CLR,
      in_0 => Rd1D,
      in_1 => "0000000000000000",
      p_out => s4);
  gate14: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => CLR,
      in_0 => Ra2D,
      in_1 => "0000000000000000",
      p_out => s1);
  gate15: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => CLR,
      in_0 => Ra1D,
      in_1 => "0000000000000000",
      p_out => s0);
  gate16: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => CLR,
      in_0 => SEI16D,
      in_1 => "0000000000000000",
      p_out => s2);
  gate17: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 3)
    port map (
      sel => CLR,
      in_0 => WAD,
      in_1 => "000",
      p_out => s3);
  gate18: entity work.DIG_Register_BUS -- Ra1
    generic map (
      Bits => 16)
    port map (
      D => s0,
      C => CLK,
      en => '1',
      Q => Ra1E);
  gate19: entity work.DIG_Register_BUS -- Ra2
    generic map (
      Bits => 16)
    port map (
      D => s1,
      C => CLK,
      en => '1',
      Q => Ra2E);
  gate20: entity work.DIG_Register_BUS -- SEI16
    generic map (
      Bits => 16)
    port map (
      D => s2,
      C => CLK,
      en => '1',
      Q => SEI16E);
  gate21: entity work.DIG_Register_BUS -- WA
    generic map (
      Bits => 3)
    port map (
      D => s3,
      C => CLK,
      en => '1',
      Q => WAE);
  gate22: entity work.DIG_Register_BUS -- Rd1
    generic map (
      Bits => 16)
    port map (
      D => s4,
      C => CLK,
      en => '1',
      Q => Rd1E);
  gate23: entity work.DIG_Register_BUS -- Rd2
    generic map (
      Bits => 16)
    port map (
      D => s5,
      C => CLK,
      en => '1',
      Q => Rd2E);
end Behavioral;
