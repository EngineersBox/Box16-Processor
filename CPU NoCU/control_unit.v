/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module LUT_Opcode LUT (
    input \0 ,
    input \1 ,
    input \2 ,
    input \3 ,
    output reg  [10:0]  out
);
    reg [10:0] my_lut [0:15];
    wire [3:0] temp;
    assign temp = {\3 , \2 , \1 , \0 };

    always @ (*) begin
       out = my_lut[temp];
    end

    initial begin
        my_lut[0] = 11'h28;
        my_lut[1] = 11'h0;
        my_lut[2] = 11'h0;
        my_lut[3] = 11'h0;
        my_lut[4] = 11'h4cc;
        my_lut[5] = 11'h534;
        my_lut[6] = 11'h0;
        my_lut[7] = 11'h0;
        my_lut[8] = 11'h5a0;
        my_lut[9] = 11'h5a1;
        my_lut[10] = 11'h5a2;
        my_lut[11] = 11'h5a3;
        my_lut[12] = 11'h0;
        my_lut[13] = 11'h0;
        my_lut[14] = 11'h0;
        my_lut[15] = 11'h0;
    end
endmodule


module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module control_unit (
  input [15:0] INST,
  output [1:0] ALUOP,
  output [2:0] RS1,
  output [2:0] RS2,
  output [2:0] WS,
  output STR,
  output WE,
  output [1:0] DMUX,
  output LDR
);
  wire [2:0] WS_temp;
  wire s0;
  wire [2:0] s1;
  wire [2:0] s2;
  wire [3:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [10:0] s8;
  wire [1:0] s9;
  wire [1:0] s10;
  assign s0 = INST[11];
  assign WS_temp = INST[10:8];
  assign s1 = INST[6:4];
  assign s2 = INST[2:0];
  assign s3 = INST[15:12];
  assign s4 = s3[0];
  assign s5 = s3[1];
  assign s6 = s3[2];
  assign s7 = s3[3];
  // Opcode LUT
  LUT_Opcode LUT LUT_Opcode LUT_i0 (
    .\0 ( s4 ),
    .\1 ( s5 ),
    .\2 ( s6 ),
    .\3 ( s7 ),
    .out( s8 )
  );
  assign ALUOP = s8[1:0];
  assign DMUX = s8[3:2];
  assign LDR = s8[4];
  assign WE = s8[5];
  assign STR = s8[6];
  assign s10 = s8[8:7];
  assign s9 = s8[10:9];
  Mux_4x1_NBits #(
    .Bits(3)
  )
  Mux_4x1_NBits_i1 (
    .sel( s9 ),
    .in_0( 3'b0 ),
    .in_1( WS_temp ),
    .in_2( s1 ),
    .in_3( s2 ),
    .out( RS1 )
  );
  Mux_4x1_NBits #(
    .Bits(3)
  )
  Mux_4x1_NBits_i2 (
    .sel( s10 ),
    .in_0( 3'b0 ),
    .in_1( WS_temp ),
    .in_2( s1 ),
    .in_3( s2 ),
    .out( RS2 )
  );
  assign WS = WS_temp;
endmodule
