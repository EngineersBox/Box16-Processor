/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_RAMDualPort
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
  input [(AddrBits-1):0] A,
  input [(Bits-1):0] Din,
  input str,
  input C,
  input ld,
  output [(Bits-1):0] D
);
  reg [(Bits-1):0] memory[0:((1 << AddrBits) - 1)];

  assign D = ld? memory[A] : 'hz;

  always @ (posedge C) begin
    if (str)
      memory[A] <= Din;
  end
endmodule


module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Demux3
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    input [2:0] sel,
    input in
);
    assign out_0 = (sel == 3'h0)? in : 'd0;
    assign out_1 = (sel == 3'h1)? in : 'd0;
    assign out_2 = (sel == 3'h2)? in : 'd0;
    assign out_3 = (sel == 3'h3)? in : 'd0;
    assign out_4 = (sel == 3'h4)? in : 'd0;
    assign out_5 = (sel == 3'h5)? in : 'd0;
    assign out_6 = (sel == 3'h6)? in : 'd0;
    assign out_7 = (sel == 3'h7)? in : 'd0;
endmodule


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module reg_file (
  input [2:0] RS1, // The index of the register which should output its value to OUT1.
  input [2:0] RS2, // The index of the register which should output its value to OUT2.
  input [2:0] WS, // The index of the register which should save the value on IN on the next clock cycle (if WE is high).
  input WE, // Whether the register selected by WS should save the value from IN on the next cycle.
  input [15:0] IN, // The value to be saved into the register specified by WS if WE is high,
  input clk,
  output [15:0] OUT1, // The value in the register specified by RS1.
  output [15:0] OUT2 // The value in the register specified by RS2.

);
  wire s0;
  wire [15:0] s1;
  wire s2;
  wire [15:0] s3;
  wire s4;
  wire [15:0] s5;
  wire s6;
  wire [15:0] s7;
  wire s8;
  wire [15:0] s9;
  Demux3 Demux3_i0 (
    .sel( WS ),
    .in( WE ),
    .out_0( s0 ),
    .out_1( s2 ),
    .out_2( s4 ),
    .out_3( s6 ),
    .out_4( s8 )
  );
  // RZ
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( 16'b0 ),
    .C( clk ),
    .en( s0 ),
    .Q( s1 )
  );
  // R1
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i2 (
    .D( IN ),
    .C( clk ),
    .en( s2 ),
    .Q( s3 )
  );
  // R2
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i3 (
    .D( IN ),
    .C( clk ),
    .en( s4 ),
    .Q( s5 )
  );
  // R3
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i4 (
    .D( IN ),
    .C( clk ),
    .en( s6 ),
    .Q( s7 )
  );
  // R4
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i5 (
    .D( IN ),
    .C( clk ),
    .en( s8 ),
    .Q( s9 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i6 (
    .sel( RS1 ),
    .in_0( s1 ),
    .in_1( s3 ),
    .in_2( s5 ),
    .in_3( s7 ),
    .in_4( s9 ),
    .in_5( 16'b0 ),
    .in_6( 16'b0 ),
    .in_7( 16'b0 ),
    .out( OUT1 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i7 (
    .sel( RS2 ),
    .in_0( s1 ),
    .in_1( s3 ),
    .in_2( s5 ),
    .in_3( s7 ),
    .in_4( s9 ),
    .in_5( 16'b0 ),
    .in_6( 16'b0 ),
    .in_7( 16'b0 ),
    .out( OUT2 )
  );
endmodule

module CompSigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = $signed(a) > $signed(b);
    assign \= = $signed(a) == $signed(b);
    assign \< = $signed(a) < $signed(b);
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module ripple_carry_adder_overflow (
  input [15:0] A,
  input [15:0] B,
  input C_in,
  output [15:0] Q,
  output C_out,
  output V
);
  wire [14:0] s0;
  wire [14:0] s1;
  wire [14:0] s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire C_out_temp;
  assign s0 = A[14:0];
  assign s4 = A[15];
  assign s1 = B[14:0];
  assign s5 = B[15];
  DIG_Add #(
    .Bits(15)
  )
  DIG_Add_i0 (
    .a( s0 ),
    .b( s1 ),
    .c_i( C_in ),
    .s( s2 ),
    .c_o( s3 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( s4 ),
    .b( s5 ),
    .c_i( s3 ),
    .s( s6 ),
    .c_o( C_out_temp )
  );
  assign Q[14:0] = s2;
  assign Q[15] = s6;
  assign V = (C_out_temp ^ s3);
  assign C_out = C_out_temp;
endmodule

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module alu (
  input [15:0] A, // First input to ALU
  input [15:0] B, // Second input to ALU
  input [1:0] ALUOP, // Operation selection input
  output [15:0] RESULT, // The result of this ALU operation
  output [3:0] FLAG // The flags associated with the result of this ALU operation
                    // 
                    // 0. Z (zero)
                    // 1. N (negative)
                    // 2. C (carry)
                    // 3. V (overflow)

);
  wire [15:0] RESULT_temp;
  wire [15:0] s0;
  wire s1;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire C_out;
  wire V;
  assign s0 = ~ B;
  CompSigned #(
    .Bits(2)
  )
  CompSigned_i0 (
    .a( 2'b1 ),
    .b( ALUOP ),
    .\= ( s1 )
  );
  assign s10 = ALUOP[1];
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i1 (
    .sel( s1 ),
    .in_0( B ),
    .in_1( s0 ),
    .out( s2 )
  );
  assign s3 = (A | s2);
  assign s5 = (A & s2);
  ripple_carry_adder_overflow ripple_carry_adder_overflow_i2 (
    .A( A ),
    .B( s2 ),
    .C_in( s1 ),
    .Q( s4 ),
    .C_out( C_out ),
    .V( V )
  );
  Mux_4x1_NBits #(
    .Bits(16)
  )
  Mux_4x1_NBits_i3 (
    .sel( ALUOP ),
    .in_0( s4 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( s3 ),
    .out( RESULT_temp )
  );
  Mux_2x1 Mux_2x1_i4 (
    .sel( s10 ),
    .in_0( C_out ),
    .in_1( 1'b0 ),
    .out( s8 )
  );
  Mux_2x1 Mux_2x1_i5 (
    .sel( s10 ),
    .in_0( V ),
    .in_1( 1'b0 ),
    .out( s9 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i6 (
    .a( RESULT_temp ),
    .b( 16'b0 ),
    .\= ( s6 ),
    .\< ( s7 )
  );
  assign FLAG[0] = s6;
  assign FLAG[1] = s7;
  assign FLAG[2] = s8;
  assign FLAG[3] = s9;
  assign RESULT = RESULT_temp;
endmodule

module manual_cpu (
  input CLK,
  input [2:0] RS1,
  input [2:0] RS2,
  input [2:0] WS,
  input STR,
  input LDR,
  input WE,
  input [15:0] IN,
  input [1:0] ALUOP,
  input [1:0] DMUX,
  output Z,
  output N,
  output C,
  output V
);
  wire [15:0] s0;
  wire [15:0] s1;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [3:0] s5;
  // RAM
  DIG_RAMDualPort #(
    .Bits(16),
    .AddrBits(16)
  )
  DIG_RAMDualPort_i0 (
    .A( s0 ),
    .Din( s1 ),
    .str( STR ),
    .C( CLK ),
    .ld( LDR ),
    .D( s2 )
  );
  Mux_4x1_NBits #(
    .Bits(16)
  )
  Mux_4x1_NBits_i1 (
    .sel( DMUX ),
    .in_0( s3 ),
    .in_1( s2 ),
    .in_2( IN ),
    .in_3( 16'b0 ),
    .out( s4 )
  );
  reg_file reg_file_i2 (
    .RS1( RS1 ),
    .RS2( RS2 ),
    .WS( WS ),
    .WE( WE ),
    .IN( s4 ),
    .clk( CLK ),
    .OUT1( s0 ),
    .OUT2( s1 )
  );
  alu alu_i3 (
    .A( s0 ),
    .B( s1 ),
    .ALUOP( ALUOP ),
    .RESULT( s3 ),
    .FLAG( s5 )
  );
  assign Z = s5[0];
  assign N = s5[1];
  assign C = s5[2];
  assign V = s5[3];
endmodule
